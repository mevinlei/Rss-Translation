<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>HN 摘要</title>
    <link>https://tg.i-c-a.su</link>
    <description>由大型语言模型编写的热门 Hacker News 故事的自动摘要。</description>
    <lastBuildDate>Sun, 02 Jun 2024 15:02:50 GMT</lastBuildDate>
    <item>
      <title>在《内在的借用检查器》中，作者概述了 4 部分路线图，以增强 Rust 的借用 [...]</title>
      <link>https://t.me/hn_summary/92743</link>
      <description><![CDATA[内部借用检查器
在《内部借用检查器》中，作者概述了增强 Rust 借用检查器的 4 部分路线图，旨在使其更好地与 Rust 的核心精神“变异异或共享”保持一致。这一原则虽然不是严格必要或充分的，但通常被证明对 Rust 的内存安全性和可维护性“恰到好处”。提议的变更包括：

1. Polonius：改进借用检查器以处理条件引用，增强 Rust 的流动性。
2. 基于位置的生命周期：引入基于变量位置的生命周期语法，使 Rust 更易于教学。
3. 视图类型：允许函数声明它们访问哪些字段，解决分阶段初始化等问题。
4. 内部引用：支持具有引用另一个拥有的数据的字段的结构，缩小了重大差距。

作者强调，这些变化将使 Rust 更加直观和易于维护，尽管某些解决方案（如视图类型）最初可能仅限于私有函数。令人惊讶的是，“突变异或共享”模式一旦被理解，就会非常完美，从而产生更不令人惊讶且更易于维护的代码。（基于 60% 的故事文本的总结。）]]></description>
      <guid>https://t.me/hn_summary/92743</guid>
      <pubDate>Sun, 02 Jun 2024 15:02:50 GMT</pubDate>
    </item>
    <item>
      <title>网站：www.circle-lang.org</title>
      <link>https://t.me/hn_summary/92742</link>
      <description><![CDATA[Circle C++ 内存安全
标题：Circle C++ 内存安全
网站：www.circle-lang.org

过去两年，美国政府不断警告内存不安全的编程语言（如 C 和 C++）的危险，这些语言支撑着该国大部分关键基础设施。行业研究支持这些担忧：微软的数据显示，其 70% 的漏洞可以通过内存安全语言缓解，而谷歌的研究表明，68% 的 0day 漏洞源于内存损坏。

尽管人们正在向 Rust 靠拢，Rust 是唯一具有严格内存安全性的系统级语言，但它与 C++ 的差异使得迁移具有挑战性。Rust 缺乏函数重载和模板等功能，而 C++ 缺乏特征和生命周期参数，从而产生了互操作性问题。

提出的解决方案是扩展 C++ 本身以包含一个严格安全的子集，称为“安全 C++”。这种方法旨在提供与 Rust 相同的安全保证，但与现有的 C++ 代码具有无缝的互操作性。安全 C++ 引入了借用检查和显式变异等新机制来防止未定义的行为，同时保持 C++ 的表现力和功能性。

目标是创建健壮、完善的软件，而不存在传统 C++ 固有的漏洞。 Safe C++ 捕获迭代器失效错误的演示体现了其在不影响性能或破坏现有代码的情况下增强内存安全性的潜力。（基于 52% 的故事文本的总结。）]]></description>
      <guid>https://t.me/hn_summary/92742</guid>
      <pubDate>Sun, 02 Jun 2024 14:45:10 GMT</pubDate>
    </item>
    <item>
      <title>[媒体] 1870 年，他为妻子的去世而悲痛不已，并因第一艘横跨大西洋的电报而获得专利 [...]</title>
      <link>https://t.me/hn_summary/92741</link>
      <description><![CDATA[开尔文勋爵和他的模拟计算机
1870 年，威廉·汤姆森（后来被称为开尔文勋爵）为悼念妻子，并因第一条跨大西洋电报电缆的专利而致富，他购买了一艘名为 Lalla Rookh 的游艇。这艘船成了他的避暑胜地和科学聚会的基地，他在那里应对了预测潮汐的挑战。水手们长期以来一直依赖潮汐图，但汤姆森在皮埃尔-西蒙·拉普拉斯的谐波振荡理论的启发下，设计了第一台潮汐预测机。这台模拟计算机使用 10 个循环成分来计算潮汐模式，这是航海技术的重大进步。汤姆森的工作通常是合作的，包括工匠和数学家的贡献，突出了工程团队的努力。他的潮汐预测机虽然不如巴贝奇的差分机出名，但更实用，设计也更精美。汤姆森对航海技术的贡献还包括指南针、天文钟和开尔文波理论。他永不满足的好奇心和对科学知识的实际应用使他成为多个领域的先驱人物。]]></description>
      <guid>https://t.me/hn_summary/92741</guid>
      <pubDate>Sun, 02 Jun 2024 14:44:01 GMT</pubDate>
    </item>
    <item>
      <title>[媒体] 在本文中，我探讨了一个常见的面试问题：计算单次出现的频率 [...]</title>
      <link>https://t.me/hn_summary/92740</link>
      <description><![CDATA[用 Python、Go、C++、C、Awk、Forth 和 Rust 计算单词数 (2021)
在本文中，我将探讨一个常见的面试问题：计算标准输入中唯一单词的频率并按频率顺序打印它们。我使用各种编程语言（Python、Go、C++、C、AWK、Forth 和 Rust）解决了这个问题，并比较了它们的性能。每种语言都具有简单、惯用的解决方案和通过分析实现的更优化的版本。这个问题很实用，揭示了候选人对文件 I/O、哈希表和排序的理解。值得注意的是，这个问题是 Donald Knuth 和 Doug McIlroy 之间著名的“巫师决斗”的基础，展示了截然不同的编程方法。完整的源代码可在我的存储库中找到，性能结果已在文章中总结。（总结基于 14% 的故事文本。）]]></description>
      <guid>https://t.me/hn_summary/92740</guid>
      <pubDate>Sun, 02 Jun 2024 14:41:51 GMT</pubDate>
    </item>
    <item>
      <title>[媒体] 网站：plexwave.org</title>
      <link>https://t.me/hn_summary/92739</link>
      <description><![CDATA[使用 OpenBSD 和 dwm 自动实现暗模式
标题：使用 OpenBSD 和 dwm 自动实现暗模式
网站：plexwave.org

为了最大限度地利用 OpenBSD，我的目标是重新创建一些 macOS 功能，例如自动亮模式和暗模式。使用简单的窗口管理器 dwm，我为版本 6.5 编写了一个补丁，用于在启动时检查 ~/.lightmode 文件，如果存在则启用亮模式。对于 Firefox 等应用程序中的主题更新，我使用 xsettingsd 和自定义脚本来切换 dwm、GTK 和 Emacs 的主题，并设置合适的壁纸。为了在日出和日落时自动切换主题，我使用 Redshift，它还可以调整屏幕色温。此设置非常灵活，可以适用于其他程序。为了获得更好的浏览体验，我建议为 Wikipedia 和 Stack Overflow 等网站使用带有深色主题的 Stylus 扩展。]]></description>
      <guid>https://t.me/hn_summary/92739</guid>
      <pubDate>Sun, 02 Jun 2024 14:41:46 GMT</pubDate>
    </item>
    <item>
      <title>[媒体] 俄罗斯正在考虑进行近 25 年来最重大的税收改革，推动因素包括 [...]</title>
      <link>https://t.me/hn_summary/92738</link>
      <description><![CDATA[俄罗斯考虑近 25 年来最大规模的税收改革
由于乌克兰持续军事行动带来的财政压力，俄罗斯正在考虑进行近 25 年来最重大的税收改革。拟议的改革包括针对富人的新累进所得税和增加公司税。这项改革最初由总统弗拉基米尔·普京在其竞选连任期间提出，旨在创造 2.6 万亿卢布（225 亿英镑）的收入。这标志着普京早先的统一税率政策发生了巨大转变。尽管克里姆林宫声称这些改革将解决国家问题并减少不平等，但公众仍持怀疑态度，许多人认为加税主要是为了资助军事行动。]]></description>
      <guid>https://t.me/hn_summary/92738</guid>
      <pubDate>Sun, 02 Jun 2024 14:38:37 GMT</pubDate>
    </item>
    <item>
      <title>想要释放性能和清晰度吗？</title>
      <link>https://t.me/hn_summary/92737</link>
      <description><![CDATA[想要解锁性能和清晰度？使用强类型
在 ekxide.io 上的文章“想要解锁性能和清晰度？使用强类型”中，作者提倡在 C++ 和 Rust 等编程语言中使用强类型来提高代码性能和清晰度。强类型强制执行特定的数据契约，确保变量遵循定义的类型，从而无需重复验证检查。例如，UserName 类型可以封装有效 POSIX 用户名的所有约束，从而保证类型级别的正确性。这种方法可以实现更具表现力的 API，减少错误，最大限度地减少错误处理，甚至可以通过集中语义检查来提高性能。本文巧妙地强调了强类型如何简化代码维护并增强可靠性。]]></description>
      <guid>https://t.me/hn_summary/92737</guid>
      <pubDate>Sun, 02 Jun 2024 14:35:28 GMT</pubDate>
    </item>
    <item>
      <title>[媒体] 科学家们研发出了一种突破性的唾液测试，可能会彻底改变前列腺的状况[...]</title>
      <link>https://t.me/hn_summary/92736</link>
      <description><![CDATA[科学家开发出廉价快速的前列腺癌唾液检测方法
科学家开发出一种突破性的唾液检测方法，可以彻底改变前列腺癌的检测方式，尽早发现高风险人群，避免其他人接受不必要的治疗。预计到 2040 年，前列腺癌诊断数量将翻一番，因此早期检测至关重要。目前的 PSA 血液检测经常会漏掉癌症或导致不必要的治疗。来自伦敦癌症研究所和皇家马斯登 NHS 基金会的研究人员开发出了一种更准确的唾液检测方法，可以检测与前列腺癌相关的遗传标记。该检测方法在 ASCO 会议上进行了展示，在试验中显示出了良好的结果，比 PSA 检测更有效地识别侵袭性癌症。需要进一步研究以确保其在不同人群中的有效性。]]></description>
      <guid>https://t.me/hn_summary/92736</guid>
      <pubDate>Sun, 02 Jun 2024 14:31:16 GMT</pubDate>
    </item>
    <item>
      <title>[媒体] Spanglish 是英语和西班牙语的混合语言，正在迅速发展，尤其是 [...]</title>
      <link>https://t.me/hn_summary/92735</link>
      <description><![CDATA[Spanglish 是世界上增长最快的语言混合体
Spanglish 是英语和西班牙语的混合语言，正在迅速发展，尤其是在拉丁裔人口众多的地区，如迈阿密的海厄利亚。会说三种语言的古巴裔美国人罗兰多·埃尔南德斯 (Rolando Hernández) 就是这种无缝语言转换的典范。据估计，美国有 3500 万到 4000 万人使用 Spanglish，但不同地区使用 Spanglish 的版本各不相同，如纽约里卡语、库班语和奇卡诺语。尽管历史上人们鄙视 Spanglish，并试图压制它，但在媒体和文化接受的推动下，它已成为主流。它被视为一种超级力量，也是在适应新环境的同时保持文化认同的工具。有争议的是，一些传统主义者仍然认为它是西班牙语的堕落。]]></description>
      <guid>https://t.me/hn_summary/92735</guid>
      <pubDate>Sun, 02 Jun 2024 14:27:32 GMT</pubDate>
    </item>
    <item>
      <title>[媒体] 我最近推出了一款具有多租户架构的 SaaS 产品，最初使用 [...]</title>
      <link>https://t.me/hn_summary/92734</link>
      <description><![CDATA[使用 Zenstack 进行多租户授权
我最近推出了一款具有多租户架构的 SaaS 产品，最初使用 Supabase RLS 进行授权，但发现管理起来很麻烦。作为唯一的开发人员，我需要一个更集成的解决方案，于是发现了 Zenstack，它通过授权层和代码生成扩展了 Prisma ORM。这种方法简化了我的工作流程，让我可以直接在架构文件中定义授权策略，从而更易于管理和调试。Zenstack 的代码生成功能显著减少了样板代码，它与应用程序代码的紧密耦合提高了迭代速度。从 Supabase RLS 到 Zenstack 的迁移比预期的要顺利，集成让我删除了大约 20% 的代码库，提高了开发效率。 

有争议：放弃 Supabase RLS 策略而采用 Zenstack 的决定可能会被那些喜欢 Supabase 内置功能的人视为有争议的决定。

独特/巧妙：使用 Zenstack 的代码生成来消除样板代码并将授权策略直接集成到架构文件中是一种巧妙的方法，可以简化开发过程。]]></description>
      <guid>https://t.me/hn_summary/92734</guid>
      <pubDate>Sun, 02 Jun 2024 14:24:23 GMT</pubDate>
    </item>
    </channel>
</rss>